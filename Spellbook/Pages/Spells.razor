@page "/spells"
@inject HttpClient Http

<h3>Spells</h3>
<div>
    
</div>
@if (spells == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div>
    @foreach (var spell in spells)
            {
                <MudExpansionPanels>
                    <MudExpansionPanel>
                        <TitleContent><b>@spell.Name</b></TitleContent>
                        <ChildContent>
                            <MudGrid>
                                <MudItem xs="3"><b>Level</b><br />@spell.Level</MudItem>
                                <MudItem xs="3"><b>Casting Time</b><br />@spell.CastingTime</MudItem>
                                <MudItem xs="3"><b>Range/Area</b><br />@spell.RangeArea</MudItem>
                                <MudItem xs="3"><b>Components</b><br />@spell.Components</MudItem>
                                <MudItem xs="3"><b>Duration</b><br />@spell.Duration</MudItem>
                                <MudItem xs="3"><b>School</b><br />@spell.School</MudItem>
                                <MudItem xs="3"><b>Attack/Save</b><br />@spell.AttackSave</MudItem>
                                <MudItem xs="3"><b>Damage/Effect</b><br />@spell.DamageEffect</MudItem>
                                <MudItem xs="12">@toMarkupString(@spell.Description)</MudItem>
                                <MudItem xs="12"><MudPaper Class="d-flex align-center justify-center mud-width-full py-8">@toMarkupString(@spell.Notes)</MudPaper></MudItem>
                                
                            </MudGrid>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
</div>
}

@code {
    private Spell[]? spells;

    protected override async Task OnInitializedAsync()
    {
        //spells = await Http.GetFromJsonAsync<Spell[]>("data/spell.json");
        spells = SortSpells(await Http.GetFromJsonAsync<Spell[]>("data/spell.json"));
    }
    protected MarkupString toMarkupString (string text)
    {
        return (MarkupString)text;
    }

    protected Spell[] SortSpells(Spell[]? spells)
    {
        if (spells==null)
        {
            return new Spell[1];
        }
        return spells;
    }

    public class Spell
    {
        public string Name { get; set; }
        public string Level { get; set; }
        public string CastingTime { get; set; }
        public string RangeArea { get; set; }
        public string Components { get; set; }
        public string Duration { get; set; }
        public string School { get; set; }
        public string AttackSave { get; set; }
        public string DamageEffect { get; set; }
        public string Description { get; set; }

        public string Notes { get; set; }

    }
}
